{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","state","data","usa_cases_ts","USA_total_cases","USA_total_deaths","GLOBAL_total_cases","GLOBAL_total_deaths","time","callBackendAPI","a","fetch","response","json","body","status","Error","message","this","then","res","console","log","ts_data","setState","USA","total_cases","total_deaths","catch","err","window","innerWidth","className","style","color","fontStyle","fontWeight","fontSize","width","margin","name","sourceType","screenName","theme","padding","options","height","xtitle","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.a8682af7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { TwitterTimelineEmbed, TwitterShareButton, TwitterFollowButton, TwitterHashtagButton, TwitterMentionButton, TwitterTweetEmbed, TwitterMomentShare, TwitterDMButton, TwitterVideoEmbed, TwitterOnAirButton } from 'react-twitter-embed';\n// import TwitterContainer from './TwitterContainer';\n\nimport { LineChart, PieChart } from 'react-chartkick'\nimport 'chart.js'\n\nclass App extends Component {\n  state = {\n    data: {},\n    usa_cases_ts: {},\n    USA_total_cases: 0,\n    USA_total_deaths: 0,\n    GLOBAL_total_cases: 0,\n    GLOBAL_total_deaths: 0,\n    time: \"\"\n  };\n\n  componentDidMount() {\n      // Call our fetch function below once the component mounts\n    this.callBackendAPI()\n      .then(res => {console.log(res.ts_data); this.setState({ usa_cases_ts: res.ts_data,data: res.data, time: res.time, USA_total_cases: res.data.USA.total_cases, USA_total_deaths: res.data.USA.total_deaths, GLOBAL_total_cases: res.data[\"Total:\"].total_cases, GLOBAL_total_deaths: res.data[\"Total:\"].total_deaths});})\n      .catch(err => console.log(err));\n  }\n    // Fetches our GET route from the Express server. (Note the route we are fetching matches the GET route from server.js\n  callBackendAPI = async () => {\n    const response = await fetch('/api/data');\n    const body = await response.json();\n\n    if (response.status !== 200) {\n      throw Error(body.message) \n    }\n    return body;\n  };\n\n  render() {\n    const isMobile = window.innerWidth <= 500;\n\n    if (isMobile){\n      return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n            <h1 className=\"App-title\">Covid-19 Stats</h1>\n          </header>\n          <p style={{color:\"white\", fontStyle: \"italic\"}}>Data referenced from WHO, CDC, worldometer</p>\n          <p style={{color: \"white\", fontWeight: \"bold\"}}>Last updated: {this.state.time}</p>\n          <div className=\"App-intro\">\n            <p style={{color: \"white\", fontWeight: \"bold\"}}><span style={{fontSize: \"200%\"}}>USA</span> total cases: <span style={{fontSize: \"200%\"}}>{this.state.USA_total_cases}</span>, total deaths: <span style={{fontSize: \"200%\"}}>{this.state.USA_total_deaths}</span></p>\n            <p style={{color: \"white\", fontWeight: \"bold\"}}><span style={{fontSize: \"200%\"}}>GLOBAL</span> total cases: <span style={{fontSize: \"200%\"}}>{this.state.GLOBAL_total_cases}</span>, total deaths: <span style={{fontSize: \"200%\"}}>{this.state.GLOBAL_total_deaths}</span></p>\n            <div style={{width: \"90%\", margin: \"0px auto\"}}>\n              <p style={{color: \"white\", fontWeight: \"bold\"}}>USA Total Cases</p>\n              <LineChart data={this.state.usa_cases_ts} width=\"100%\" name=\"Covid 19 data\" color=\"white\" />\n            </div>\n          </div>\n          <div className=\"tweets\">\n            <TwitterTimelineEmbed\n              sourceType=\"profile\"\n              screenName=\"CDCgov\"\n              theme=\"dark\"\n              padding=\"10px\"\n              options={{height: 3000, width: \"80%\"}}\n            />\n            <div className=\"sliver\">\n  \n            </div>\n            <TwitterTimelineEmbed\n              sourceType=\"profile\"\n              screenName=\"WHO\"\n              theme=\"dark\"\n              options={{height: 3000, width: \"80%\"}}\n            />\n          </div>\n          <div/>\n          {/* <a class=\"twitter-timeline\" data-lang=\"en\" data-width=\"400\" data-height=\"3000\" data-theme=\"dark\" href=\"https://twitter.com/WHO?ref_src=twsrc%5Etfw\">Tweets by WHO</a> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n          <a class=\"twitter-timeline\" data-lang=\"en\" data-width=\"400\" data-height=\"3000\" data-theme=\"dark\" href=\"https://twitter.com/CDCgov?ref_src=twsrc%5Etfw\">Tweets by CDCgov</a> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> */}\n        </div>\n      );\n\n    } else {\n      console.log(\"yo\");\n      console.log(this.state.usa_cases_ts);\n      console.log(\"fat\");\n      return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n            <h1 className=\"App-title\">Covid-19 Stats</h1>\n          </header>\n          <p style={{color:\"white\", fontStyle: \"italic\"}}>Data referenced from WHO, CDC, JHU, worldometer</p>\n          <p style={{color: \"white\", fontWeight: \"bold\"}}>Last updated: {this.state.time}</p>\n          <div className=\"App-intro\">\n            <p style={{color: \"white\", fontWeight: \"bold\"}}><span style={{fontSize: \"200%\"}}>USA</span> total cases: <span style={{fontSize: \"200%\"}}>{this.state.USA_total_cases}</span>, total deaths: <span style={{fontSize: \"200%\"}}>{this.state.USA_total_deaths}</span></p>\n            <p style={{color: \"white\", fontWeight: \"bold\"}}><span style={{fontSize: \"200%\"}}>GLOBAL</span> total cases: <span style={{fontSize: \"200%\"}}>{this.state.GLOBAL_total_cases}</span>, total deaths: <span style={{fontSize: \"200%\"}}>{this.state.GLOBAL_total_deaths}</span></p>\n            \n            <div style={{width: \"60%\", margin: \"0px auto\"}}>\n              <p style={{color: \"white\", fontWeight: \"bold\"}}>USA Total Cases</p>\n              <LineChart data={this.state.usa_cases_ts} width=\"100%\" name=\"Covid 19 data\" xtitle=\"dog\" color=\"white\" />\n            </div>\n          </div>\n\n          <div className=\"tweets\">\n            <TwitterTimelineEmbed\n              sourceType=\"profile\"\n              screenName=\"CDCgov\"\n              theme=\"dark\"\n              padding=\"10px\"\n              options={{height: 3000}}\n            />\n            {/* <div className=\"sliver\">\n\n            </div> */}\n            <TwitterTimelineEmbed\n              sourceType=\"profile\"\n              screenName=\"WHO\"\n              theme=\"dark\"\n              options={{height: 3000}}\n            />\n          </div>\n          {/* <a class=\"twitter-timeline\" data-lang=\"en\" data-width=\"400\" data-height=\"3000\" data-theme=\"dark\" href=\"https://twitter.com/WHO?ref_src=twsrc%5Etfw\">Tweets by WHO</a> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n          <a class=\"twitter-timeline\" data-lang=\"en\" data-width=\"400\" data-height=\"3000\" data-theme=\"dark\" href=\"https://twitter.com/CDCgov?ref_src=twsrc%5Etfw\">Tweets by CDCgov</a> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> */}\n        </div>\n      );\n\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}