{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","state","data","usa_cases_ts","state_cases","country_cases","USA_total_cases","USA_total_deaths","GLOBAL_total_cases","GLOBAL_total_deaths","time","callBackendAPI","a","fetch","response","json","body","status","Error","message","element","id","console","log","text","ReactGA","initialize","pageview","this","then","res","ts_data","setState","USA","total_cases","total_deaths","catch","err","window","innerWidth","className","style","color","fontStyle","fontWeight","fontSize","width","margin","name","chartType","concat","options","region","displayMode","resolution","backgroundColor","defaultColor","mapsApiKey","rootProps","height","sourceType","screenName","theme","padding","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.798a563e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport ReactGA from 'react-ga';\nimport logo from './logo.svg';\nimport './App.css';\nimport { TwitterTimelineEmbed } from 'react-twitter-embed';\n// import TwitterContainer from './TwitterContainer';\n// import USAMap from \"react-usa-map\";\n// import BarChart from 'react-bar-chart';\nimport {Chart} from \"react-google-charts\";\n\nimport { LineChart, PieChart, ColumnChart,GeoChart, Timeline } from 'react-chartkick'\nimport 'chart.js'\n\nvar config = {};\n// var jd = {\n//   \"NJ\": {\n//     fill: \"navy\",\n//     // clickHandler: (event) => console.log('Custom handler for NJ', event.target.dataset)\n//   },\n//   \"NY\": {\n//     fill: \"#CC0000\",\n//   },\n//   \"CA\": {\n//     fill: \"navy\",\n//   }\n// };\nvar ssss = {\"WA\":442,\"NY\":328,\"CA\":221,\"MA\":108,\"GA\":31,\"CO\":45,\"FL\":35,\"NJ\":29,\"OR\":24,\"TX\":27,\"IL\":32,\"PA\":22,\"IA\":16,\"MD\":12,\"NC\":15,\"SC\":12,\"TN\":18,\"VA\":17,\"AZ\":9,\"IN\":13,\"KY\":10,\"NV\":14,\"NH\":6,\"MN\":9,\"NE\":10,\"OH\":5,\"RI\":5,\"WI\":8,\"CT\":5,\"HI\":2,\"OK\":2,\"UT\":5,\"KS\":1,\"LA\":19,\"MO\":1,\"VT\":2,\"AK\":0,\"AR\":6,\"DE\":1,\"ID\":0,\"ME\":0,\"MI\":2,\"MS\":1,\"MT\":1,\"NM\":5,\"ND\":1,\"SD\":8,\"WV\":0,\"WY\":1};\nconst margin = {top: 20, right: 20, bottom: 30, left: 40};\nvar ddd = [[\"WA\",442],[\"NY\",328],[\"CA\",221],[\"MA\",108],[\"GA\",31],[\"CO\",45],[\"FL\",35],[\"NJ\",29],[\"OR\",24],[\"TX\",27],[\"IL\",32],[\"PA\",22],[\"IA\",16],[\"MD\",12],[\"NC\",15],[\"SC\",12],[\"TN\",18],[\"VA\",17],[\"AZ\",9],[\"IN\",13],[\"KY\",10],[\"NV\",14],[\"NH\",6],[\"MN\",9],[\"NE\",10],[\"OH\",5],[\"RI\",5],[\"WI\",8],[\"CT\",5],[\"HI\",2],[\"OK\",2],[\"UT\",5],[\"KS\",1],[\"LA\",19],[\"MO\",1],[\"VT\",2],[\"AK\",0],[\"AR\",6],[\"DE\",1],[\"ID\",0],[\"ME\",0],[\"MI\",2],[\"MS\",1],[\"MT\",1],[\"NM\",5],[\"ND\",1],[\"SD\",8],[\"WV\",0],[\"WY\",1]];\nvar dddd = [ { text: \"WA\", value: 200}, {text: \"CA\", value: 100}, { text: \"WAY\", value: 200}, {text: \"CAY\", value: 100}, { text: \"DWA\", value: 200}, {text: \"CDA\", value: 100}    ];\nclass App extends Component {\n  state = {\n    data: {},\n    usa_cases_ts: {},\n    state_cases: [],\n    country_cases: [],\n    USA_total_cases: 0,\n    USA_total_deaths: 0,\n    GLOBAL_total_cases: 0,\n    GLOBAL_total_deaths: 0,\n    time: \"\"\n  };\n\n  // mapHandler = (event) => {\n  //   alert(event.target.dataset.name);\n  // };\n  \n  // percentageToHsl(percentage, hue0, hue1) {\n  //   var hue = (percentage * (hue1 - hue0)) + hue0;\n  //   return 'hsl(' + hue + ', 100%, 50%)';\n  // }\n  // setStates(states){\n  //   var max_key = Object.keys(states).reduce((a, b) => states[a] > states[b] ? a : b);\n  //   var min_key = Object.keys(states).reduce((a, b) => states[a] < states[b] ? a : b);\n  //   var min = states[min_key];\n  //   var max = states[max_key];\n  //   var r1 = [min, max];\n  //   console.log(states);\n  //   console.log(r1);\n  //   for (var key in states){\n  //     var percentage = (states[key] - min) / (max - min);\n  //     var color = this.percentageToHsl(percentage, 120, 0);  \n  //     config[key] = {\n  //       fill: color\n  //     };\n  //   }\n  //   console.log(config);\n  //   console.log(\"aite\");\n  // }\n\n  // /* optional customization of filling per state and calling custom callbacks per state */\n  // statesCustomConfig = () => {\n  //   return {\n  //     \"NJ\": {\n  //       fill: \"navy\",\n  //       // clickHandler: (event) => console.log('Custom handler for NJ', event.target.dataset)\n  //     },\n  //     \"NY\": {\n  //       fill: \"#CC0000\"\n  //     },\n  //     \"CA\": {\n  //       fill: \"hsl(30.950226244343895, 100%, 50%)\"\n  //     }\n  //   };\n  // };\n\n  // setBar(data){\n\n  // }\n\n  handleBarClick(element, id){ \n    console.log(`The bin ${element.text} with id ${id} was clicked`);\n  }\n\n  async componentDidMount() {\n    // Call our fetch function below once the component mounts\n    ReactGA.initialize('UA-160186542-1');\n    ReactGA.pageview(\"/index\");\n    // console.log(\"dogg\");\n    // this.setStates(ssss);\n    await this.callBackendAPI()\n      .then(res => {\n        console.log(res.ts_data); \n        // console.log(\"dogg\");\n        // this.setStates(ssss);\n        this.setState({ country_cases: res.country_cases, state_cases: res.state_cases, usa_cases_ts: res.ts_data,data: res.data, time: res.time, USA_total_cases: res.data.USA.total_cases, USA_total_deaths: res.data.USA.total_deaths, GLOBAL_total_cases: res.data[\"Total:\"].total_cases, GLOBAL_total_deaths: res.data[\"Total:\"].total_deaths});\n      })\n      .catch(err => console.log(err));\n  }\n    // Fetches our GET route from the Express server. (Note the route we are fetching matches the GET route from server.js\n  callBackendAPI = async () => {\n    const response = await fetch('/api/data');\n    const body = await response.json();\n\n    if (response.status !== 200) {\n      throw Error(body.message) \n    }\n    return body;\n  };\n\n  render() {\n    const isMobile = window.innerWidth <= 500;\n\n    if (isMobile){\n      return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n            <h1 className=\"App-title\">Covid-19 Stats</h1>\n          </header>\n          <p style={{color:\"white\", fontStyle: \"italic\"}}>Data referenced from WHO, CDC, JHU, worldometer</p>\n          <p style={{color: \"white\", fontWeight: \"bold\"}}>Last updated: {this.state.time}</p>\n          <div className=\"App-intro\">\n            <p style={{color: \"white\", fontWeight: \"bold\"}}><span style={{fontSize: \"200%\"}}>USA</span> total cases: <span style={{fontSize: \"200%\"}}>{this.state.USA_total_cases}</span>, total deaths: <span style={{fontSize: \"200%\"}}>{this.state.USA_total_deaths}</span></p>\n            <p style={{color: \"white\", fontWeight: \"bold\"}}><span style={{fontSize: \"200%\"}}>GLOBAL</span> total cases: <span style={{fontSize: \"200%\"}}>{this.state.GLOBAL_total_cases}</span>, total deaths: <span style={{fontSize: \"200%\"}}>{this.state.GLOBAL_total_deaths}</span></p>\n            <div style={{width: \"90%\", margin: \"0px auto\"}}>\n              <p style={{color: \"white\", fontWeight: \"bold\"}}>USA Total Cases</p>\n              <LineChart data={this.state.usa_cases_ts} width=\"100%\" name=\"Covid 19 data\" color=\"white\" />\n            </div>\n\n            <div style={{width: \"90%\", margin: \"0px auto\"}}>\n              <p style={{color: \"white\", fontWeight: \"bold\"}}>[Geo Graph] Total Cases Broken Down By State</p>\n\n              <Chart\n                width={'100%'}\n                // height={'450px'}\n                chartType=\"GeoChart\"\n                data={[[\"State\", \"Total Cases\"]].concat(this.state.state_cases)}\n                options={{\n                  region: 'US',\n                  displayMode: 'regions',\n                  resolution: 'provinces',\n                  // colorAxis: { colors: ['#00853f', 'black', '#e31b23'] },\n                  backgroundColor: '#81d4fa',\n                  // datalessRegionColor: '#f8bbd0',\n                  defaultColor: '#f5f5f5',\n                }}\n                mapsApiKey=\"AIzaSyCudIgYTjBdvrSWDx6-M-f7RKkpUSt6ukA\"\n                rootProps={{ 'data-testid': '1' }}\n              />\n            </div>\n\n\n            <div style={{width: \"90%\", height: 400, margin: \"0px auto\" }}>\n              <p style={{color: \"white\", fontWeight: \"bold\"}}>[Bar Graph] Total Cases Broken Down By State</p>\n              <ColumnChart data={this.state.state_cases} />\n\n            </div>\n            <div style={{width: \"90%\", margin: \"0px auto\"}}>\n              <p style={{color: \"white\", fontWeight: \"bold\"}}>Total Cases Broken Down By Country</p>\n\n              <Chart\n                width={'100%'}\n                // height={'450px'}\n                chartType=\"GeoChart\"\n                data={this.state.country_cases}\n                options={{\n                  // colorAxis: { colors: ['#00853f', 'black', '#e31b23'] },\n                  backgroundColor: '#81d4fa',\n                  // datalessRegionColor: '#f8bbd0',\n                  defaultColor: '#f5f5f5',\n                }}\n                mapsApiKey=\"AIzaSyCudIgYTjBdvrSWDx6-M-f7RKkpUSt6ukA\"\n                rootProps={{ 'data-testid': '1' }}\n              />\n            </div>\n          </div>\n          <div className=\"tweets\">\n            <TwitterTimelineEmbed\n              sourceType=\"profile\"\n              screenName=\"CDCgov\"\n              theme=\"dark\"\n              padding=\"10px\"\n              options={{height: 3000, width: \"80%\"}}\n            />\n            <div className=\"sliver\">\n  \n            </div>\n            <TwitterTimelineEmbed\n              sourceType=\"profile\"\n              screenName=\"WHO\"\n              theme=\"dark\"\n              options={{height: 3000, width: \"80%\"}}\n            />\n          </div>\n          <div/>\n          {/* <a class=\"twitter-timeline\" data-lang=\"en\" data-width=\"400\" data-height=\"3000\" data-theme=\"dark\" href=\"https://twitter.com/WHO?ref_src=twsrc%5Etfw\">Tweets by WHO</a> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n          <a class=\"twitter-timeline\" data-lang=\"en\" data-width=\"400\" data-height=\"3000\" data-theme=\"dark\" href=\"https://twitter.com/CDCgov?ref_src=twsrc%5Etfw\">Tweets by CDCgov</a> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> */}\n        </div>\n      );\n\n    } else {\n      return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n            <h1 className=\"App-title\">Covid-19 Stats</h1>\n          </header>\n          <p style={{color:\"white\", fontStyle: \"italic\"}}>Data referenced from WHO, CDC, JHU, worldometer</p>\n          <p style={{color: \"white\", fontWeight: \"bold\"}}>Last updated: {this.state.time}</p>\n          <div className=\"App-intro\">\n            <p style={{color: \"white\", fontWeight: \"bold\"}}><span style={{fontSize: \"200%\"}}>USA</span> total cases: <span style={{fontSize: \"200%\"}}>{this.state.USA_total_cases}</span>, total deaths: <span style={{fontSize: \"200%\"}}>{this.state.USA_total_deaths}</span></p>\n            <p style={{color: \"white\", fontWeight: \"bold\"}}><span style={{fontSize: \"200%\"}}>GLOBAL</span> total cases: <span style={{fontSize: \"200%\"}}>{this.state.GLOBAL_total_cases}</span>, total deaths: <span style={{fontSize: \"200%\"}}>{this.state.GLOBAL_total_deaths}</span></p>\n            \n            <div style={{width: \"60%\", margin: \"0px auto\"}}>\n              <p style={{color: \"white\", fontWeight: \"bold\"}}>USA Total Cases</p>\n              <LineChart data={this.state.usa_cases_ts} width=\"100%\" name=\"Covid 19 data\" color=\"white\" />\n            </div>\n\n            <div style={{width: \"60%\", margin: \"0px auto\"}}>\n              <p style={{color: \"white\", fontWeight: \"bold\"}}>[Geo Graph] Total Cases Broken Down By State</p>\n\n              <Chart\n                width={'100%'}\n                height={'450px'}\n                chartType=\"GeoChart\"\n                data={[[\"State\", \"Total Cases\"]].concat(this.state.state_cases)}\n                options={{\n                  region: 'US',\n                  displayMode: 'regions',\n                  resolution: 'provinces',\n                  // colorAxis: { colors: ['#00853f', 'black', '#e31b23'] },\n                  backgroundColor: '#81d4fa',\n                  // datalessRegionColor: '#f8bbd0',\n                  defaultColor: '#f5f5f5',\n                }}\n                mapsApiKey=\"AIzaSyCudIgYTjBdvrSWDx6-M-f7RKkpUSt6ukA\"\n                rootProps={{ 'data-testid': '1' }}\n              />\n            </div>\n\n            <div style={{width: \"60%\", margin: \"0px auto\"}}>\n              <p style={{color: \"white\", fontWeight: \"bold\"}}>[Bar Graph] Total Cases Broken Down By State</p>\n              <ColumnChart data={this.state.state_cases} />\n\n              {/* <p style={{color: \"white\", fontWeight: \"bold\"}}>USA Heat Map</p> */}\n              {/* <USAMap title=\"ok\" width=\"90%\" customize={config} onClick={this.mapHandler} /> */}\n            </div>\n\n            <div style={{width: \"60%\", margin: \"0px auto\"}}>\n              <p style={{color: \"white\", fontWeight: \"bold\"}}>Total Cases Broken Down By Country</p>\n\n              <Chart\n                width={'100%'}\n                height={'450px'}\n                chartType=\"GeoChart\"\n                data={this.state.country_cases}\n                options={{\n                  // colorAxis: { colors: ['#00853f', 'black', '#e31b23'] },\n                  backgroundColor: '#81d4fa',\n                  // datalessRegionColor: '#f8bbd0',\n                  defaultColor: '#f5f5f5',\n                }}\n                mapsApiKey=\"AIzaSyCudIgYTjBdvrSWDx6-M-f7RKkpUSt6ukA\"\n                rootProps={{ 'data-testid': '1' }}\n              />\n            </div>\n\n\n\n          </div>\n\n          <div className=\"tweets\">\n            <TwitterTimelineEmbed\n              sourceType=\"profile\"\n              screenName=\"CDCgov\"\n              theme=\"dark\"\n              padding=\"10px\"\n              options={{height: 3000}}\n            />\n            {/* <div className=\"sliver\">\n\n            </div> */}\n            <TwitterTimelineEmbed\n              sourceType=\"profile\"\n              screenName=\"WHO\"\n              theme=\"dark\"\n              options={{height: 3000}}\n            />\n          </div>\n          {/* <a class=\"twitter-timeline\" data-lang=\"en\" data-width=\"400\" data-height=\"3000\" data-theme=\"dark\" href=\"https://twitter.com/WHO?ref_src=twsrc%5Etfw\">Tweets by WHO</a> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n          <a class=\"twitter-timeline\" data-lang=\"en\" data-width=\"400\" data-height=\"3000\" data-theme=\"dark\" href=\"https://twitter.com/CDCgov?ref_src=twsrc%5Etfw\">Tweets by CDCgov</a> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> */}\n        </div>\n      );\n\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}